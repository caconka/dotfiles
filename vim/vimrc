" Stop acting like classic vi
set nocompatible            " disable vi compatibility mode
set history=1000            " increase history size
set noswapfile              " don't create swapfiles
"set nobackup                " don't backup, use git!

" Modeline secure
set nomodeline

" Enable filetype
filetype indent plugin on

" Persist undo history between file editing sessions.
set undofile
set undodir=~/.vim/undodir

" Modify indenting settings
set autoindent              " autoindent always ON.
set mouse=a                 " mouse all
set list
set listchars=tab:\│\ ,trail:·,eol:¬,extends:>,precedes:<

" Modify some other settings about files
set encoding=utf-8          " always use unicode (god damnit, windows)
set backspace=indent,eol,start " backspace always works on insert mode
set hidden

" Search
set hlsearch  " Highlighting when search
set smartcase " case sensitive

" Scrolling when we're n lines away from margins
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" Tags
set tags+=tags;$HOME

" Colorscheme configuration.
if &t_Co > 2
	syntax on
	silent! colorscheme nord
	set background=dark

	highlight Folded cterm=reverse ctermbg=0 ctermfg=8
	highlight VertSplit cterm=NONE ctermbg=NONE ctermfg=8
	highlight Conceal cterm=NONE ctermbg=NONE ctermfg=8

	highlight DiffAdd ctermfg=green cterm=bold
	highlight DiffDelete ctermfg=red cterm=bold
	highlight DiffChange ctermfg=yellow

	let &colorcolumn=120
endif

" Mark trailing spaces depending on whether we have a fancy terminal or not
if &t_Co > 2
	highlight ExtraWhitespace ctermbg=1
	match ExtraWhitespace /\s\+$/
else
	set listchars=trail:~
	set list
endif

" Use a specific pipe ch
set fillchars+=vert:\┊

set noshowmode
set laststatus=1        " always show statusbar
set wildmenu            " enable visual wildmenu

set nowrap              " don't wrap long lines
set number              " show line numbers
set relativenumber      " show numbers as relative by default
set showmatch           " higlight matching parentheses and brackets
set ignorecase          " searching is not case sensitive
set autoread            " if file is changed on disk

" Italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
highlight Comment cterm=italic

" Change cursor in different modes
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;BlinkingCursorEnabled=1\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;BlinkingCursorEnabled=0\x7\<Esc>\\"
" upon hitting escape to change modes, send successive move-left and move-right
" commands to immediately redraw the cursor
inoremap <special> <Esc> <Esc>hl
" don't blink the cursor
set guicursor+=i:blinkwait0

" Change tab tittle
autocmd BufEnter * call system("tmux rename-window " . expand("%:t"))
autocmd VimLeave * call system("tmux rename-window bash")
autocmd BufEnter * let &titlestring = "%:t"
set title

" tmux screen view
if &term == "screen"
	set t_Co=256
endif

" Shortcuts for switching the buffers
map <C-l> :bnext<CR>
map <C-h> :bprev<CR>
imap <C-l> <Esc>:bnext<CR>i
imap <C-h> <Esc>:bprev<CR>i

" Tabs
vmap <Tab> >gv
vmap <S-Tab> <gv

" remap C-Left and C-Right
"map 5D vB
"map 5C vE
imap <ESC>oA <ESC>ki
imap <ESC>oB <ESC>ji
imap <ESC>oC <ESC>li
imap <ESC>oD <ESC>hi

" Move lines vertically
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

let mapleader="\<Space>"

" Netrw tree
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 0
let g:netrw_altv = 1
let g:netrw_winsize = 16
map <Leader>nt :Lexplore<CR>

" Toggle wrap
nnoremap <leader>z :set wrap!<CR>

" Resize splits
nnoremap <silent> + :exe "vertical resize +5"<CR>
nnoremap <silent> - :exe "vertical resize -5"<CR>
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" Print date
nmap <F6> "=strftime("%F")<CR>P
imap <F6> <C-R>=strftime("%F")<CR>

" Paste clipboard
let os=substitute(system('uname'), '\n', '', '')
if os == 'Darwin' || os == 'Mac'
	nnoremap <C-R>+ :r !pbpaste<CR>
	noremap! <C-?> <C-h>
elseif os == 'Linux'
	nnoremap <C-R>+ :r !xclip -selection clipboard -o<CR>
endif

" Relative numbering is pretty useful for motions (3g, 5k...). However I'd
" prefer to have a way for switching relative numbers with a single map.
nmap <F5> :set invrelativenumber<CR>
imap <F5> <ESC>:set invrelativenumber<CR>a

" fzf needs to be configured before loads the plugin fzf.vim
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf

" ###################
" # Custom commands #
" ###################

" Beautify JSON
function! JsonFmt()
  %!python -m json.tool
  %s;^\(\s\+\);\=repeat(' ', len(submatch(0))/2);g
endfunction

command! JsonFmt :call JsonFmt()

" Git add current buffer
function! GitAddBuffer()
  w
  windo !git add %
endfunction

command! GitAddBuffer :call GitAddBuffer()

" :E to create a new file inside new folder(s)
function s:MKDir(...)
    if         !a:0
           \|| isdirectory(a:1)
           \|| filereadable(a:1)
           \|| isdirectory(fnamemodify(a:1, ':p:h'))
        return
    endif
    return mkdir(fnamemodify(a:1, ':p:h'), 'p')
endfunction
command -bang -bar -nargs=? -complete=file E :call s:MKDir(<f-args>) | e<bang> <args>
