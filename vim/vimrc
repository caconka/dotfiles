" caconka

" vim-plug is not installed
if empty(glob("~/.vim/autoload/plug.vim"))
    silent !curl -fLso ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
end

" utf-8
scriptencoding utf-8

" Init vim-plug plugins
call plug#begin('~/.vim/plugged/')

" General purpose plugins
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ap/vim-buftabline'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'mattn/emmet-vim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'w0rp/ale'
Plug 'editorconfig/editorconfig-vim'

" Language support
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'pangloss/vim-javascript'
Plug 'nono/jquery.vim'
Plug 'leafgarland/typescript-vim'
Plug 'posva/vim-vue'

" Colorschemes
Plug 'junegunn/seoul256.vim'
call plug#end()

" Stop acting like classic vi
set nocompatible            " disable vi compatibility mode
set history=1000            " increase history size
set noswapfile              " don't create swapfiles
set nobackup                " don't backup, use git!

" Modify indenting settings
set autoindent              " autoindent always ON.
set smartindent             " intelligent indent
set tabstop=2               " tab width
set softtabstop=2           " remove a full pseudo-TAB when i press <BS>
set shiftwidth=2            " spaces for autoindenting
set mouse=a                 " mouse all
set list
set listchars=tab:\│\ ,trail:·,eol:¬,extends:>,precedes:<

" Display all matching files when we tab complete
set wildmenu

" Modify some other settings about files
set encoding=utf-8              " always use unicode (god damnit, windows)
set backspace=indent,eol,start  " backspace always works on insert mode
set hidden

" Highlighting when search
set hlsearch

" Some programming languages work better when only 2 spaces padding is used.
autocmd FileType html,css,sass,scss,javascript,typescript setlocal sw=2 sts=2
autocmd FileType json setlocal sw=2 sts=2
autocmd FileType ruby,eruby setlocal sw=2 sts=2
autocmd FileType yaml setlocal sw=2 sts=2

" Close braces
ino " ""<left>
ino ' ''<left>
ino ( ()<left>
ino [ []<left>
ino { {}<left>
ino {<CR> {<CR>}<ESC>O
ino {;<CR> {<CR>};<ESC>O

" Move CtrlY to CtrlZ (Emmet)
let g:user_emmet_expandabbr_key = '<C-Z>'
let g:user_emmet_mode='a'

" ALE config
let g:ale_completion_enabled = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_fixers = { 'javascript': ['eslint'], 'vue': ['eslint'],
\ 'css': ['prettier'], 'scss': ['prettier'] }
nmap <silent> <F3> <Plug>(ale_previous_wrap)
nmap <silent> <F4> <Plug>(ale_next_wrap)
nmap <silent> <F8> <Plug>(ale_fix)

" Vim-vue disable checking for preprocessors
let g:vue_disable_pre_processors=1

" Omnicomplete
set completeopt=longest,menuone
set completeopt+=preview

" tmux screen view
if &term == "screen"
  set t_Co=256
endif

" Are we supporting colors?
if &t_Co > 2 || has("gui_running")
   syntax on
   let &colorcolumn=join(range(81,999),",")
   let g:seoul256_srgb = 1
   let g:seoul256_background = 234
   silent! colo seoul256
endif

" Mark trailing spaces depending on whether we have a fancy terminal or not
if &t_Co > 2 || has("gui_running")
    highlight ExtraWhitespace ctermbg=red guibg=red
    match ExtraWhitespace /\s\+$/
else
    set listchars=trail:~
    set list
endif

set fillchars+=vert:\   " Remove unpleasant pipes from vertical splits
                        " Sauce on this: http://stackoverflow.com/a/9001540

set showmode            " always show which more are we in
set laststatus=2        " always show statusbar
set wildmenu            " enable visual wildmenu

set nowrap              " don't wrap long lines
set number              " show line numbers
set relativenumber      " show numbers as relative by default
set showmatch           " higlight matching parentheses and brackets
set ignorecase          " searching is not case sensitive

let mapleader=","

" Toggle wrap
nnoremap <leader>z :set wrap!<CR>

" Working with buffers is cool.
set hidden
nnoremap <C-l> :bnext<CR>
nnoremap <C-h> :bprev<CR>
inoremap <C-l> <ESC>:bnext<CR>a
inoremap <C-h> <ESC>:bprev<CR>a
noremap <C-t> :tabnew<CR>

" Tabs
vmap <Tab> >gv
vmap <S-Tab> <gv

" Move lines vertically
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" fzf
nmap <C-p> :GFiles<CR>
nmap <Leader>p :Files<CR>
imap <C-p> <ESC>:GFiles<CR>a
nmap <Leader>b :Buffers<CR>
nmap <Leader>h :History<CR>
nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>
nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>

" Ack
nnoremap <leader>f :Ag<CR>

" Autosave
au FocusGained,BufEnter * :silent! !
au FocusLost,WinLeave * :silent! w

" Resize splits
nnoremap <silent> + :exe "vertical resize +5"<CR>
nnoremap <silent> - :exe "vertical resize -5"<CR>
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

" Scrolling when we're n lines away from margins
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" Change cursor in different modes
let &t_SI = "\<Esc>]12;#ef5777\x7\e[1 q"
let &t_EI = "\<Esc>]12;\e[0 q"
autocmd VimLeave * silent !echo -ne "\033]112\007;\e[1 q"

" Toggle relative numbering
nmap <F5> :set invrelativenumber<CR>
imap <F5> <ESC>:set invrelativenumber<CR>a

" NERDTree
map <Leader>nt :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen=0
let NERDTreeShowHidden=1
let NERDTreeWinSize=35
